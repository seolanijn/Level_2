Standard Template Library Containers
====================================
- STL include libraries for data structures and algorithms
- STL containers share a common share interface; similar syntax
- each container offers different performance and functionality trade-off's 

STL Containers Categories
=========================
Sequential containers:
	array<base_type, 10>
	vector<base_type>
	list<base_type>
	deque<base_type>

Associative Containers:
	set<base_type>
	
Memory Allocation for Sequential Containers
===========================================
8,2,5,2,5,1,2

vector<int> v{8,2,5,2,5,1,2};	//initialization constructor, RAII
list<int> l{8,2,5,2,5,1,2};
deque<int> d{8,2,5,2,5,1,2};

v.size();
l.size();
d.size();

=================vector=====================================================

current stack			heap         How much memory has been allocated
			 0 1 2 3 4 5 6
v	-------------->	[8,2,5,2,5,1,2]	   //7 x 4B = 28B   size = 7, capacity = 7 (it's changed 1 or 2 beyound the size)
(0xff70) v[0]
(0xff74) v[1]
(0xff78) v[2]

v.push_back(10);
random_access iterator because stores in contiguous memory(every elements are side by side)

current stack			heap            How much memory has been allocated
			 0 1 2 3 4 5 6  7
v	-------------->	[8,2,5,2,5,1,2,10]   //8 x 4B = 32B   size = 8, capacity = 9
=================list=======================================================
l       -------------->   <??>         <*8*>           <*2*>            <*5*>
(0xaa56)                   <*2*>
                                  <*5*>     <*1*>
                                                     <*2*>   <??>
We don't know where it is. but we have pointers for all elements
bidirectional iterators
NO [], at access

l.push_back(10);
l       -------------->   <??>         <*8*>           <*2*>            <*5*>
(0xaa56)                   <*2*>
                                  <*5*>     <*1*>
                                                     <*2*>   <*10*>     <??>
l.push_front(20);
l       -------------->    <??>   <*20*>      <*8*>           <*2*>            <*5*>
(0xaa56)                   <*2*>
                                  <*5*>     <*1*>
                                                     <*2*>   <*10*>     <??>
l.insert(l.begin()+2, 99);
l       -------------->    <??>   <*20*>      <*8*>           <*2*>      <*99*>       <*5*>
(0xaa56)                   <*2*>
                                  <*5*>     <*1*>
                                                     <*2*>   <*10*>     <??>
=================deque=====================================================
			 0 1 2 3 4 5 6
d	-------------->	[8,2,5,2,5,1,2]

d.puch_back(101);

			 0 1 2 3 4 5 6
d	-------------->	[8,2,5,2,5,1,2]*
                                        *[101,0,0,0,0]
d.push_front(99);
			            0     1 2 3 4 5 6 7
d	-------------->	 [0,0,0,0,0,99]  [8,2,5,2,5,1,2]* 8
                                                        *[101,0,0,0,0]

d.pop_front();     --> 99
d.pop_back();      --> 101

[], at access
random access iterators
================Memory Allocation for Associative Containers==================
----------------set----------------------------------------------------------
8,2,5,2,5,1,2

set<int> s{8,2,5,2,5,1,2};		//initialization constructor

What's in the set?
1,2,5,8

- set auto accepts unique elements
- set auto sorts

s     ------------->       5
                        2     8
                       1
- set stores as a binary tree
- middle element as the root
- elements on the lefthand side < root
- elements on the righthand side > root
- bidrectional iterators, read-only


s.insert(3);
s.insert(7);
s.insert(12);

s      ------------->       5
                        2       8
                       1 3    7  12


s.insert(5); //not unique, not inserted

s      ------------->       5
                        2       8
                       1 3    7  12  

set<int>::iterator itr = s.begin();
set<int>::reverse_iterator ritr = s.rbegin();
                         
----------------map--------------------------------------------------------

8,2,5,2,5,1,2


m     ------------->        5(2)		5 is the key, 2 is the frequency (value)
                        2(3)    8(1)
                     1(1)

- a map element stores two values: key, associated value
- a map auto stores unique values, by key
- a map auto sorts elements, by key

***How is a map initialized?***

map<int, int> m {{8,1}, {2,3}, {5,2}, {1,1}, {8,3}, {4,3}};
m     ------------->             5(2)	
                        2(3) 4(3)    8(1)
                     1(1)

***About a map***
- a map's base type is always a <pair> object
- <int, int> is a <pair> object with two public variables: first, second
- a <pair> is always two types (primitive, object)

ex)
map<string, unsigned> months {{"January", 1}, {"February", 2}, etc. };
map<string, vector<string>> container;
vector<vector<char>> grid;

***What's the benefit of using a map?***
- you access the map using its key;
- a key "maps" to its value

map<int, int> m {{8,1}, {2,3}, {5,2}, {1,1}, {8,3}};

cout << m[5];		//reads 2 {5,2}, '[]' is not indexed, but key for map
cout << m.at(2);	//reads 3 {2,3}

m[5] = 10;		//writes 10   {5,2} --> {5,10}

m.at(8) = 16;		//writes 16   {8,16}

++m[2];			//writes +1   {2,4}

m.insert({5, 60});	// does nothing. ignores it because it is not unique
m.insert({6,60});	//new elements {6,60} because it is unique 마지막으로 들어감

cout << months["January"] << endl;	//reads 1	

=====================================================================================
=====================================================================================

vector<int> v = {1,2,3,4,5};
list<int> l = {1,2,3,4,5};
deque<int> d = {1,2,3,4,5};

v.push_back(6);
l.push_back(6);
d.push_back(6);

v
l
d.push_front(0)

v
l
d.pop_front();

sort(v.begin(), v.end());
l.sort();
sort(d.begin(), d.end());

//erase duplicate
unique(words.begin(), words.end());
words.erase(itr, words.end());

//reverse
reverse(l.begin(), l.end())
reverse(v.begin(), v.end());
